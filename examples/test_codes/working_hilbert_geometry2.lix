
# Litex 代码示例：希尔伯特几何公理系统

# 希尔伯特的公理系统由六种基本符号组成。其中，有三种基本对象：点、直线（简称“线”）、平面（简称“面”）；以及三种基本关系：

# 夹（betweenness）：一种联系点的三元关系；
# 落（lies on）/含（containment）：一组三种二元关系，分别联系点与直线、点与平面，以及平面与直线；
# 同（congruence）：一组两种二元关系，分别联系两条线段或两个角，均以中缀符号 ≅ 表示。
上面提到的线段、角，以及更多诸如三角形之类的概念，均可在点线面的基本对象上，运用夹与含这两种基本关系加以定义。下面所列出的公理中，除非特别声明，所有提及的对象都是互异的。

set point
set line
set plane

prop point_on_line(p point, l line)
prop point_on_plane(q point, p plane)
prop line_on_plane(l line, p plane)

# 所在

# 1. 给定任意两点 A、B，存在一条直线 a 同时包含其二者。这记作 AB=a 或 BA=a。 除了“a 包含 A 与 B”，也可以用其他方式表述，例如：“A 是 a 上的点”“a 穿过了 A 与 B”“a 连接了 A 与 B”。 若点 A 同时落于两条直线 a 与 b 上，也可以说“直线 a 与 b 有公共点 A”。

fn line_of(a point, b point) line:
    a != b
    then:
        $point_on_line(line_of(a, b), a)
        $point_on_line(line_of(a, b), b)
        forall l line:
            $point_on_line(a, l)
            $point_on_line(b, l)
            then:
                l = line_of(a, b)

# prove 表示开一个局部环境，下面的所有内容不会对大环境有影响，用途是让用户做一些小测试
prove:
    obj a point, b point, l line:
        a != b
        $point_on_line(a, l)
        $point_on_line(b, l)
    l = line_of(a, b)

# 2. 给定任意两点 A、B，最多只存在一条直线同时包含其二者。这也是说，若对于相异两点 B、C，同时有 AB=a 与 AC=a，那么有 BC=a。

know forall l line, a point, b point:
    a != b
    $point_on_line(a, l)
    $point_on_line(b, l)
    then:
        $a_line_has_more_than_two_points(l, a, b)

prove:
    obj a point, b point, l line:
        a != b
        $point_on_line(a, l)
        $point_on_line(b, l)

    $a_line_has_more_than_two_points(l,a,b)

    have c st $a_line_has_more_than_two_points(l,a,b)

    $point_on_line(c,l)

# 3. 一条直线上至少存在两个点；又，至少存在不共线的三个点。

exist_prop c point st a_line_has_more_than_two_points(l line, a point, b point):
    a != b
    $point_on_line(a, l)
    $point_on_line(b, l)
    iff:
        $point_on_line(c, l)
        c != a
        c != b

know forall l line, a point, b point:
    a != b
    $point_on_line(a, l)
    $point_on_line(b, l)
    then:
        $a_line_has_more_than_two_points(l, a, b)

exist_prop c point st exist_one_point_not_on_the_same_line_with_two_points(a point, b point):
    a != b
    iff:
        not $point_on_line(c, line_of(a, b))



# Tip: 用户有义务让代码更易读，以便在社区中分享，最好的方式就是取名取的合适到位。长一些的命名是有益的，这样能用名字就说清楚所有的信息，也更符合人们阅读自然语言的习惯。用户不必担心打字太多，因为大部分的IDE在你输入名字的头几位时，就会提示或补全剩下的名字。