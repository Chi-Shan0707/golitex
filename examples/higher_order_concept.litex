type group G:
    member:
        property has(x any)
        fn mul(x any, y any) any:
            if:
                G.has(x)
                G.has(y)
            then:
                G.has(G.mul(x, y))

    then:
        forall x any, y any, z any:
            if:
                G.has(x)
                G.has(y)
                G.has(z)
            then:
                G.mul(G.mul(x,y), z) = G.mul(x, G.mul(y,z))

exist group_related_elements(g any): 
    member:
        var e any
        fn mul(x any, y any) any
        property has(x any)

    then:
        forall x any, y any, z any:
            if:
                has(x)
                has(y)
                has(z)
            then:
                mul(mul(x,y), z) = mul(x,mul(y,z))


type GroupSet G:
    then:
        group_related_elements(G)