# TODO
# prove_by_contradiction: 因为我暂时没实现exist，forall的then里也不能有forall fact，所以自动送给用户 逆否命题的成立性非常困难。需要用户自己手动去证明，反正也就一两行。这样的一大好处是，减少很多内存占用：一旦逆否命题自动生成，那内存占用量大1倍.


# define union
know:
    forall z obj, A set, B set:
        in(z, A)
        then:
            in(z,union(A, B) )

    forall z obj, A set, B set:
        in(z, B)
        then:
            in(z,union(A, B) )

prove:
    know:
        in(x, A)
        in(y, B)

    in(x, union(A, B))
    in(y, union(A,B))

# define intersection
know:
    forall z obj, A set, B set:
        in(z, A)
        in(z, B)
        then:
            in(z, intersection(A,B))

    forall z obj, A set, B set:
        not in(z, A)
        then:
            not in(z, intersection(A,B))

prove:
    in(1,B)
    in(1, A)
    in(1, intersection(A,B)) # true

    know:
        not in(2, A)
    
    in(2, intersection(A,B)) # false

prove:
    know:
        in(2, A) # 矛盾以know的形式被引入。此时一些命题可能既对又错1
        in(2 ,B)
        not in(2, A)

    # 既对又错，这是用户引入的，不能说是litex有问题，只能说用户在know的时候太不小心了。litex不检查know，因为know是作为“引入公理”而存在的。数学作为一个语言，一定有些东西是用户“默认是对的”，我必须保留这样的接口让“默认对”可以实现。
    in(2, intersection(A,B)) # true
    not in(2, intersection(A,B)) # true
