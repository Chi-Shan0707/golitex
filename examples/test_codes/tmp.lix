# Formalize Terence Tao Analysis 1 Chapter 3 Set Theory

# Definition of Two Sets are Equal
know forall x, y set:
	x = y
    then:
        forall a x:
            a $in y
        forall a y:
            a $in x

know @two_sets_are_equal_iff_they_have_the_same_elements(x, y set):
    forall a x:
        a $in y
    forall a y:
        a $in x
    then:
        x = y

# Definition of Empty Set
prop is_empty_set(x set):
    forall a obj:
        not a $in x

# There is a builtin-in empty set in Litex
have builtin_empty_set := {}
forall x obj:
    not x $in builtin_empty_set

exist_prop x obj st obj_exist_in_set(s set):
    x $in s

# There is just one empty set
claim:
    forall s set:
        not $is_empty_set(s)
        then:
           $obj_exist_in_set(s)
    prove_by_contradiction:
        forall x obj:
            not x $in s
        $is_empty_set(s)
        
# You can define a finite set of items like this:
have set_of_one_two_three := {1, 2, 3}

# Pairwise Union
fn union(s1 set, s2 set) set
prop obj_in_union_is_in_one_of_the_sets(s1 set, s2 set, x obj):
    or:
        x $in s1
        x $in s2
        

know:
    forall s1, s2 set, x s1:
    	x $in union(s1, s2) 
    forall s1, s2 set, x s2:
    	x $in union(s1, s2) 
    forall s1, s2 set, x union(s1, s2):
        $obj_in_union_is_in_one_of_the_sets(s1, s2, x)

# {a, b} = {a} \union {b}
claim:
	forall a, b obj, s1, s2, x obj:
        s1 := {a}
        s2 := {b}
        x $in union(s1, s2)
        then:
            or:
                x = a
                x = b
    prove:
        $obj_in_union_is_in_one_of_the_sets(s1, s2, x)
        prove_in_each_case:
            or:
                x $in s1
                x $in s2
            then:
                or:
                	x = a
                    x = b
            prove:
                x $in s1
                x = a
            prove:
                x $in s2
                x = b

prop is_subset_of(s1 set, s2 set):
    forall x s1:
        x $in s2

prove:
    have a := {1, 2, 4}
    have b := {1, 2, 3, 4, 5}
    prove_over_finite_set:
        forall x a:
            x $in b
    a $is_subset_of b

claim:
    @subset_of_is_transitive(a, b, c set):
        a $is_subset_of b
        b $is_subset_of c
        then:
            a $is_subset_of c
    prove:
        forall x a:
            x $in b
            x $in c
        forall x a:
            x $in c
        a $is_subset_of c

# Axiom of Specification
prove:
    obj A set
    prop P(x A)
	have a := x A:
        $P(x)
    forall x A:
        $P(x)
        then:
        	x $in a
    forall x a:
        x $in A
        $P(x)

# Intersection
know @obj_in_intersection_is_in_both_sets(s1 set, s2 set, x obj):
    x $in s1
    x $in s2

fn intersection(s1 set, s2 set) set:
    forall x s1:
        x $in intersection(s1, s2)
    forall x s2:
        x $in intersection(s1, s2)
    forall x intersection(s1, s2):
        $obj_in_intersection_is_in_both_sets(s1, s2, x)

# The set of all natural numbers is the union of the set of all natural numbers greater than n and the set of all natural numbers less than or equal to n
know @union_of_N_greater_than_n_and_less_than_or_equal_to_n_is_N(n N, s1 set, s2 set):
	s1 := x N:
		x > n
	s2 := x N:
		x <= n
	then:
		union(s1, s2) = N

prove:
    have a := x N:
        x > 0
    have b := x N:
        x <= 0
    $union_of_N_greater_than_n_and_less_than_or_equal_to_n_is_N(0, a, b)
    union(a, b) = N

"""
Declaration of difference(s1 set, s2 set) in have statement is equivalent to:
know:
    forall x difference(a, b):
        x $in a
        not x $in b
    forall x a:
        not x $in b
        then:
            x $in difference(a, b)
"""
have difference(s1 set, s2 set) := x s1:
    not x $in s2

# Union of a set and the empty set is the set itself
claim:
	forall a set, s set:
        s := {}
        then:
            forall x union(a, s):
                x $in a
    prove:
        claim:
        	forall x union(a, s):
                x $in a
            prove_by_contradiction:
            	not x $in a
                $obj_in_union_is_in_one_of_the_sets(a, s, x)
                x $in s
                not x $in s

# Intersection of a set and the empty set is the empty set
claim:
	forall a set, s set:
        s := {}
        then:
            forall x intersection(a, s):
                x $in a
    prove:
        claim:
        	forall x intersection(a, s):
                x $in a
            prove_by_contradiction:
            	not x $in a
                $obj_in_intersection_is_in_both_sets(a, s, x)
                x $in s
                not x $in s

# Union of a set and itself is the set itself
claim:
    forall a set:
    	union(a, a) = a
    prove:
        claim:
        	forall x union(a, a):
                x $in a
        prove:
            $obj_in_union_is_in_one_of_the_sets(a, a, x)
            x $in a
        	