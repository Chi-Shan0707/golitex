let a R, b R: a = 1, b = 2, forall x R: x = a => x = a; b = 3
let c, d R: c = 1, forall x R: x = c => forall y R: y = d => y = d;; d = 3,
let e, f R: e = 1, forall x R: forall y R: x = y => x = y;  => e = 3; d = 3

let a R: a = 1

let a R:
    a = 1
let x R, y R:
    2 * x + 3 * y = 10
    4 * x + 5 * y = 14
let x, R: 2 * x + 3 * y = 10, 4 * x + 5 * y = 14

let x, y R
know:
    ...
    ...

fn_template f(x R):
    fn (y another_fn_template) another_fn_template

forall x R:
    dom:
        x > 1
    then:
        x <= 2
    iff:
        not x > 2

forall x R:
    x > 1
    x <= 2
    then:
        not x > 2

forall x R:
    x > 1
    not x > 2
    then:
        x <=2

@p(x R):
    x > 1
    then:
        x > 0

prop p(x R):
    x > 1

forall x R:
    x > 1
    then:
        x > 0

know forall x, y R:
    x < y
    y < 0
    then:
        x < 0

let a , b R:
    a < b
    b < 0

a < 0

prop p(x , y R):
    x < y
    y < 0

know forall x, y R:
    $p(x , y)
    then:
        x < 0

@p(x, y R):
    x < y
    y < 0
    then:
        x < 0

$p(a, b)
a < 0