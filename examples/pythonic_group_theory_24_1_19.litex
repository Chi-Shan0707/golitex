pub concept [G Group]:
  exist:
    fn *(x G, y G) G
    fn inv(x G) G
    var 1 G
  
  property:
    if x G, y G:
      (x * y) * z = x * (y * z)
    if x G:
      x * G.1 = G.1 * x
    if x G:
      inv(x) * x = G.1
      x * inv(x) = G.1

property Abelian[G Group]:
  if x G, y G:
    x * y = y * x

local:
  let G Group 
  know $Abelian(G)
  if x G, y G:
    x * y = y * x

// 我厌恶hierarchy，但在数学概念里，貌似用hierarchy很合理，毕竟数学概念不会经常变化。interface的好处是更新数据结构的时候容易，但数学你不会经常改定义。同时你把两个完全独立的concept同时组合在一个concept下面的话，可能会造成疑惑。
pub concept [G AbelianGroup]:
  property:
    G is Group // 这个语义需要好好斟酌一下
    G is Abelian

pub concept [M Monoid]:
  exist:
  fn *(x M,y M) M
  let 1 M

  property:
    if x M, y M:
      (x * y) * z = x * (y * z)
    if x M:
      M.1 * x = x * M.1

property injective(F fn(x var) var):
  if x var, y var: F(x) = F(y):
      x = y

property surjective(F fn(x var) var):
  if y var:: F.images.has(y):
    exist x var:
      F(x) = y

Claim:
  if [G Group] a G, F fn:: F = group_transformation[G](a):
    F is injective
prove:
  if x1 G, x2 G:: F(x1) = F(x2):
    a * x1 = F(x1)
    a * x2 = F(x2)
    a * x1 = a * x2 
    inv(a) * (a * x2) = inv(a) * (a * x1)
    inv(a) * (a * x2) = (inv(a) * a) * x2 = 1 * x2 = x2
    inv(a) * (a * x1) = (inv(a) * a) * x1 = 1 * x1 = x1
    x2 = x1

import ("nat")

Fn ^(n Nat) F fn (x G) G:
  ^(++(n))(x) = ^(n)(x) * x
  ^(0)(x) = G.1

Fn power_of_inverse_is_inverse_of_power[G Group](x G) P Property (n Nat):
  ^(n)(inv(x)) = inv(^(n)(x))