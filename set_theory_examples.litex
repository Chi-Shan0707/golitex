def object(x);
def set(x);
know if x: set(x) => {object(x)};
def subset(A,B);
def in(x,A);
know if A, B: A,B are set => {if x: if in(x,A) => {in(x,B)} => {subset(A,B)}};
know if A, B: A,B are set => {if subset(A,B) => {if x: in(x,A) => {in(x,B)} }};

def equal(A,B);
know if x: equal(A,B), in(x,A) => {in(x,B)};
know if x: equal(A,B), in(x,B) => {in(x,A)};

def empty(x);
know if x, y : x is empty, y is empty => {equal(x,y)};
know if x, A: empty(A) => {not in(x, A)};

{
let A,B,C: A,B,C are set, equal(A,B);
let x :in(x,A);
let s1, s2 : s1 is empty, s2 is empty;
equal(s1,s2);
}

{
know if x: in(x,A) => {in(x,B)};
subset(A,B);
know subset(B,C);
if A,B,C: A,B,C are set, subset(A,B), subset(B,C) => {if x: in(x,A) => {in(x,B), in(x,C)}, subset(A,C)};
subset(A,C);
}

// def specification(P,A) : is_property(P, 1), set(A) exist B: {B is set, if x: in(x,B) //=> {P(x), in(x,A)}, if x: P(x), in(x,A) => {in(x,B)} };
// know specification(object, A);
// have specification(object, A) : objects_in_A;
// objects_in_A is set;
// know if y: y is object => {exist x: {P(x,y)}[replacement]};