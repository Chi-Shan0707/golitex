prove:
    know:
        # (forall y: cond(y) => result(x,y)) => p(x)
        forall x B:
            forall y A:
                cond(y)
                then:
                    result(x,y)
            then:
                p(x)

    when:
        forall y A:
            cond(y)
            then:
                result(1,y)
        then:
            p(1)        

prove:
    know:
        forall x A:
            p(x)
            then:
                p(x)
    p(1) # unknown. NO IFF DEAD LOCK

prove:
    know:
        forall x A:
            p(x)
            then:
                q(x)
        forall x A:
            q(x)
            then:
                p(x)
    p(1) # unknown. NO IFF DEAD LOCK

prove:
    know:
        # Define: p(x) iff forall y: cond(y) => result(x,y)
        
        # p(x) => (forall y: cond(y) => result(x,y))
        forall x B, y A:
            cond(y)
            p(x)
            then:
                result(x,y)
        
        # (forall y: cond(y) => result(x,y)) => p(x)
        forall x B:
            forall y A:
                cond(y)
                then:
                    result(x,y)
            then:
                p(x)

    prove: # ok
        know p(1)
        forall y A:
            cond(y)
            then:
                result(1,y)

    when:
        forall y A:
            cond(y)
            then:
                result(1,y)
        then:
            p(1)

prove:
    know forall x A:
        p(x)
        then:
            Q(x)
            Q(x)

    know:
        p(1)
    
    Q(1)

# 容斥原理
prove:      
    know:
        forall z obj, A set, B set:
            in(z, A)
            then:
                in(z,union(A, B) )

        forall z obj, A set, B set:
            in(z, B)
            then:
                in(z,union(A, B) )
    
        in(x, A)
        in(y, B)

    in(x, union(A, B))
    in(y, union(A,B))

    know:
        forall z obj, A set, B set:
            in(z, A)
            in(z, B)
            then:
                in(z, intersection(A,B))

        forall z obj, A set, B set:
            not in(z, A)
            then:
                not in(z, intersection(A,B))

        
        in(1,B)
        in(1, A)
    in(1, intersection(A,B)) # true

    know:
        not in(2, A)
    in(1, intersection(A,B)) # false

    know:
        in(2, A) // 矛盾以know的形式被引入。此时一些命题可能既对又错1
        in(2 ,B)
    
    # 既对又错
    in(2, intersection(A,B)) # true
    not in(1, intersection(A,B)) # true
    