type group G:
    member:
        property has(x any)
        fn mul(x any, y any) any:
            if:
                G.has(x)
                G.has(y)
            then:
                G.has(G.mul(x, y))

    then:
        forall x any, y any, z any:
            if:
                G.has(x)
                G.has(y)
                G.has(z)
            then:
                G.mul(G.mul(x,y), z) = G.mul(x, G.mul(y,z))

// 之所以必须要是any，因为本来涉及到的参数的主类型是什么，higher-order type就不需要考虑.
exist group_related_elements(g any): //exist 对应 type的member
    member:
        var e any
        fn mul(x any, y any) any
        property has(x any) //这里也可以看到 Property 和 fn和var的地位是一样的

    then:
        forall x any, y any, z any:
            if:
                has(x)
                has(y)
                has(z)
            then:
                mul(mul(x,y), z) = mul(x,mul(y,z))
// prove exist 需要和 prove 有点不一样


type GroupSet G:
    then:
        forall g G:
            group_related_elements(g)

implement group_related_elements(g any): //exist 对应 type的member
    member:
        var e any
        fn mul(x any, y any) any
        property has(x any) //这里也可以看到 Property 和 fn和var的地位是一样的

    then:
        forall x any, y any, z any:
            if:
                has(x)
                has(y)
                has(z)
            then:
                mul(mul(x,y), z) = mul(x,mul(y,z))


type GroupSet G:
    then:
        forall x G:
            group_related_elements(g)