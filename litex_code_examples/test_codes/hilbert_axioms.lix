set point
set line
set plane

fn angle(a point, b point, c point) real

prop point_on_line(p point, l line)
prop point_on_plane(q point, p plane)

# Axioms of "existence and uniqueness" are represented using fn & know forall statements
fn line_of(a point, b point) line:
    a != b
    then:
        $point_on_line(line_of(a, b), a)
        $point_on_line(line_of(a, b), b)

# TODO: Allow uniFact to appear in fn then blocks
know:
    forall l line, a point, b point:
        $point_on_line(a, l)
        $point_on_line(b, l)
        then:
            l = line_of(a, b)

exist_prop c point st a_line_has_more_than_two_points(l line, a point, b point):
    $point_on_line(a, l)
    $point_on_line(b, l)
    a != b
    iff:
        $point_on_line(c, l)
        c != a
        c != b

fn plain_of(a point, b point, c point) plane:
    a != b
    a != c
    b != c
    then:
        $point_on_plane(a, plain_of(a, b, c))
        $point_on_plane(b, plain_of(a, b, c))
        $point_on_plane(c, plain_of(a, b, c))

know:
    forall p plane, a point, b point, c point:
        $point_on_plane(a, p)
        $point_on_plane(b, p)
        $point_on_plane(c, p)
        a != b
        a != c
        b != c
        then:
            p = plain_of(a, b, c)

# TODO: prop 下面能有 forall
prop line_on_plane(l line, p plane):
    forall x point:
        $point_on_line(x, l)
        then:
            $point_on_plane(x, p)
    
know:
    forall p plane, a point, b point:
        $point_on_plane(a, p)
        $point_on_plane(b, p)
        a != b
        $line_on_plane(p, line_of(a, b))

exist_prop b point st if_two_planes_both_has_point_then_they_have_another_point_in_common(a point, p plane, q plane):
    $point_on_plane(a, p)
    $point_on_plane(a, q)
    iff:
        $point_on_plane(b, p)
        $point_on_plane(b, q)
        a != b

prop four_points_on_one_plane(a point, b point, c point, d point, p plane):
    $point_on_plane(a, p)
    $point_on_plane(b, p)
    $point_on_plane(c, p)
    $point_on_plane(d, p)
    a != b
    a != c
    a != d
    b != c
    b != d
    c != d

exist_prop a point, b point, c point, d point st exist_four_points_not_on_given_plane(p plane):
    not $four_points_on_one_plane(a, b, c, d, p)

forall p plane:
    $exist_four_points_not_on_given_plane(p)

prop between(left point, right point, middle point):
    left != right
    iff:
        $point_on_line(middle, line_of(left, right))

know forall left point, right point, middle point:
    $between(left, right, middle)
    then:
        $between(right, left, middle)

exist_prop right point st exist_point_right_to_given_two_points(left point, middle point):
    left != middle
    iff:
        $between(left, right, middle)

know forall a point, b point:
    a != b
    then:
        $exist_point_right_to_given_two_points(a, b)

prop no_more_than_one_point_between_three_points_on_line(a point, b point, c point):
    a != b
    a != c
    b != c
    iff:
        or:
            $between(a, b, c)
            $between(a, c, b)
            $between(b, a, c)
            $between(b, c, a)
            $between(c, a, b)
            $between(c, b, a)

# TODO: logic expr in forall
know forall a point, b point, c point:
    a != b
    a != c
    b != c
    then:
        $no_more_than_one_point_between_three_points_on_line(a, b, c)

set finite_line

fn finite_line_of(a point, b point) finite_line:
    dom:
        a != b
    then:
        $point_on_line(a, l)
        $point_on_line(b, l)

prop commutative_prop intersect_finite_line_and_finite_line(l finite_line, m finite_line)

# prop either_intersect_line_or_another(point a, point b, point c, line l):
#     a != b
#     a != c
#     b != c
#     not $point_on_line(a, l)
#     not $point_on_line(b, l)
#     not $point_on_line(c, l)
#     $intersect_finite_line_and_finite_line(l, finite_line_of(a, b))
#     iff:
#         or:
#             $intersect_finite_line_and_finite_line(l, finite_line_of(a, c))
#             $intersect_finite_line_and_finite_line(l, finite_line_of(b, c))
# 
# know forall a point, b point, c point, l line:
#     a != b
#     a != c
#     b != c
#     not $point_on_line(a, l)
#     not $point_on_line(b, l)
#     not $point_on_line(c, l)
#     $intersect_finite_line_and_finite_line(l, finite_line_of(a, c))
#     then:
#         $either_intersect_line_or_another(a, b, c, l)
