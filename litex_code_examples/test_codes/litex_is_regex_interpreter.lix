# Match known specific fact with given specific fact
prove:
    $p0(a)   # most common specific fact
    a < b   # most common relational fact
    know:
        $p0(a)
        a < b
    $p(0) # unknown, because p is not equal to p0
    $p0(a)
    a < b

# Match known universal fact with given specific fact
prove:
    know:
        forall x A, y B:
            $p1(x,y)
    $p1(1,1)
    $p1(1,2)

# two parameters match the same parameter in universal fact
prove:
    know:
        forall x A:
            $p1(x,x)
    $p1(1,1)
    $p1(1,2)

# given fact matches then fact in universal fact
prove:
    know forall x R, y R, z R:
        x < y
        y < z
        then:
            x < z

    know:
        a < b
        b < d

    a < d # unknown: there are just 2 parameters in the given specific fact, but 3 parameters in the given universal fact

# use proposition definition to generate new fact
prove:
    prop transitive(x R, y R, z R):
        x < y
        y < z
        iff:
            x < z

    know:
        a < b
        b < d
        forall x R, y R, z R:
            $transitive(x, y, z)
        
    $transitive(a, b, d) # automatically generated a new fact a < d
    a < d

# match return value of function
prove:
    know forall x R:
        $p(x)
        then:
            $p(f(x))
    $p(f(x))
    know $p(x)
    $p(f(x))
    
# match parameter as a function return value
prove:
    know:
        forall x A:
            $p(f(x))

    know:
        t = f
                
    $p(t(x))

    know:
        forall x A:
            $p2(x)

    $p2(ha)
    $p2(g(x, 100))

# match nested function call
prove:
    know:
        forall x A, y B:
            $p3(f(x)(y))

    $p3(f(1)(2))
    $p3(f(1)(g(2, 3)))
    $p3(f(1)(g(2, 3))(4))

# match function name as a parameter
prove:
    know forall a A, b B, c C, d D:
        a(b)(c) = d(c)(a)
    
    a2(b2)(c2) = d2(c2)(a2)

# match nested function call
prove:
    know:
        forall x A, y B:
            f(x) = g(x)(y)

    f(1)(z) = g(1)(2)(z)
    f(1) = g(1)(2)
    f(1)(z) = g(1)(2)(z) # 我只帮你用forall检查最后一位的相等，不检查前面的位。前面只能用specFact来检查?


prove:
    know $p(x)
    $p(x)

    know y = x
    $p(y)

    know forall a A:
        $q(a)
        then:
            x = a
    know $q(b)

    $p(b) # unknown
    b =x
    $p(b) # true. 因为 = 有交换性，而我确实实现了可交换的符号能在用uniFact验证时用上可交换性，所以只用 b = x，而不是 x = b 就能运行.


prove:
    q(1*4+2*f(a)) = q(4+2*f(a))
    know f(a) = 100
    q(1*4+2*f(a)) = q(4+2*100)

prove:
    know:
        forall x A:
            $p(x,1)
    $p(2,3-2)

prove:
    1.2 / 0.3 = 4
    1 / 0.9 = 3 / 2.7 # 暂时不能验证，因为我还没加入frac的各种forall性质
    1 / 0.9 = 1 / 0.9
    8 ^ 2 = 64
    16 ^ 2 = 256 # 暂时不能让 ^ 里面的东西是小数
    1 + 1 = 2
    10 + 32 = 42
    1*2 = 4 -2
    10 + 32 * 2 = 74
    10 + 32 * 2 = 75
    2 * 7 + 10 = 3 * 4 * 2
