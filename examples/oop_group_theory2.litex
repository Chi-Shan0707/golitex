package group_theory

import ("set_theory")

concept Group G {
  relation =(x,y: G) {
    = is transitive;
    = is reflective;
  }

  fn *(x,y: G) var result: G {
    (x * y) * z = x * (y * z);
  }

  var 1: G {
    if x: G {x * 1 = x; x = 1 * x;}
  }

  fn inv(x: G) var result:G {
    result * x = 1;
    x * result = 1;
  }
}